import os
import sys
import logging
import threading
import time
from datetime import datetime, timedelta
from flask import Flask, render_template, request, redirect, url_for, jsonify
import psycopg2
import psycopg2.extras
from werkzeug.middleware.proxy_fix import ProxyFix
from bot import bot
from models import get_db_connection, get_guild_config, get_leaderboard, get_user_stats
from utils import get_level_effect

# Настройка уровня логирования
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

logger = logging.getLogger(__name__)

# Create Flask app with static files directory
app = Flask(__name__, static_folder='static', static_url_path='/static')
app.secret_key = os.environ.get("SESSION_SECRET", "dev_secret_key")
app.wsgi_app = ProxyFix(app.wsgi_app, x_proto=1, x_host=1)

# Маршруты для веб-интерфейса
@app.route('/')
def index():
    """Домашняя страница со списком серверов"""
    try:
        conn = get_db_connection()
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            # Получаем список всех серверов
            cursor.execute("""
                SELECT gs.guild_id, gs.guild_name, gs.guild_icon,
                       COUNT(DISTINCT us.user_id) AS user_count,
                       SUM(us.contribution) AS total_contribution
                FROM GuildSettings gs
                LEFT JOIN UserStats us ON gs.guild_id = us.guild_id
                GROUP BY gs.guild_id, gs.guild_name, gs.guild_icon
                ORDER BY user_count DESC
            """)
            guilds = cursor.fetchall()
            
            # Получаем конфигурацию для каждого сервера
            guild_list = []
            for guild in guilds:
                config = get_guild_config(guild['guild_id'])
                guild_data = dict(guild)
                guild_data['unit_name'] = config.get('contribution_unit_name', 'часов')
                guild_list.append(guild_data)
            
        conn.close()
        return render_template('index.html', guilds=guild_list)
    except Exception as e:
        logger.error(f"Ошибка на главной странице: {e}")
        return render_template('error.html', error=str(e))

@app.route('/guild/<int:guild_id>')
def guild_stats(guild_id):
    """Страница статистики сервера"""
    try:
        conn = get_db_connection()
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            # Получаем информацию о сервере
            cursor.execute("""
                SELECT * FROM GuildSettings WHERE guild_id = %s
            """, (guild_id,))
            guild = cursor.fetchone()
            
            if not guild:
                return render_template('error.html', error="Сервер не найден")
            
            # Получаем конфигурацию сервера
            config = get_guild_config(guild_id)
            
            # Получаем лидеров сервера
            leaderboard = get_leaderboard(guild_id, limit=100)
            
            # Получаем общую статистику
            cursor.execute("""
                SELECT COUNT(DISTINCT user_id) as user_count,
                       SUM(contribution) as total_contribution,
                       SUM(total_seconds) as total_time,
                       MAX(current_level) as max_level
                FROM UserStats
                WHERE guild_id = %s
            """, (guild_id,))
            stats = cursor.fetchone()
        
        conn.close()
        return render_template('guild.html', 
                              guild=guild, 
                              config=config, 
                              leaderboard=leaderboard,
                              stats=stats)
    except Exception as e:
        logger.error(f"Ошибка на странице сервера: {e}")
        return render_template('error.html', error=str(e))

@app.route('/guild/<int:guild_id>/user/<int:user_id>')
def user_stats(guild_id, user_id):
    """Страница статистики пользователя на сервере"""
    try:
        conn = get_db_connection()
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            # Получаем информацию о сервере
            cursor.execute("""
                SELECT * FROM GuildSettings WHERE guild_id = %s
            """, (guild_id,))
            guild = cursor.fetchone()
            
            if not guild:
                return render_template('error.html', error="Сервер не найден")
            
            # Получаем статистику пользователя
            stats = get_user_stats(user_id, guild_id)
            
            if not stats:
                return render_template('error.html', error="Пользователь не найден")
            
            # Получаем конфигурацию сервера
            config = get_guild_config(guild_id)
            
            # Получаем ранг пользователя
            cursor.execute("""
                SELECT COUNT(*) + 1 as rank
                FROM UserStats
                WHERE guild_id = %s AND contribution > 
                    (SELECT contribution FROM UserStats WHERE guild_id = %s AND user_id = %s)
            """, (guild_id, guild_id, user_id))
            rank_result = cursor.fetchone()
            rank = rank_result['rank'] if rank_result else 1
            
        conn.close()
        return render_template('user.html', 
                              guild=guild, 
                              user=stats,
                              config=config,
                              rank=rank)
    except Exception as e:
        logger.error(f"Ошибка на странице пользователя: {e}")
        return render_template('error.html', error=str(e))

@app.route('/levels')
def levels():
    """Страница с информацией о порогах уровней"""
    try:
        conn = get_db_connection()
        with conn.cursor(cursor_factory=psycopg2.extras.DictCursor) as cursor:
            # Получаем информацию о всех серверах
            cursor.execute("""
                SELECT guild_id, guild_name, level_thresholds
                FROM GuildSettings
            """)
            guilds = cursor.fetchall()
            
            guild_list = []
            for guild in guilds:
                # Получаем конфигурацию для сервера
                config = get_guild_config(guild['guild_id'])
                
                # Преобразуем JSON-строку в словарь
                level_thresholds = {}
                if guild['level_thresholds']:
                    try:
                        level_thresholds = eval(guild['level_thresholds'])
                    except:
                        pass
                
                guild_data = {
                    'id': guild['guild_id'],
                    'name': guild['guild_name'],
                    'unit_name': config.get('contribution_unit_name', 'часов'),
                    'thresholds': level_thresholds
                }
                guild_list.append(guild_data)
                
        conn.close()
        return render_template('levels.html', guilds=guild_list)
    except Exception as e:
        logger.error(f"Ошибка на странице уровней: {e}")
        return render_template('error.html', error=str(e))

def run_flask():
    """Запуск веб-сервера Flask"""
    try:
        app.run(host='0.0.0.0', port=5000, debug=True, use_reloader=False)
    except Exception as e:
        logger.error(f"Ошибка при запуске Flask: {e}")

def run_bot():
    """Запуск Discord бота"""
    try:
        bot.run(os.environ.get('DISCORD_TOKEN'))
    except Exception as e:
        logger.error(f"Ошибка при запуске бота: {e}")

if __name__ == '__main__':
    # Запуск Flask в отдельном потоке
    flask_thread = threading.Thread(target=run_flask, daemon=True)
    flask_thread.start()
    
    # Запуск бота в основном потоке
    run_bot()